# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/184_-4u5LZ1Rz-Eis6euO-SN9teZV210W
"""

pip install biopython

import random

def pointmutation(dna):
    bases = ['A','T','C','G']
    pos = random.randint(0,len(dna)-1)
    original_base = dna[pos]
    new_base = random.choice([a for a in bases if a != original_base])
    mutated = dna[:pos] + new_base + dna[pos+1:]
    return dna, mutated, pos, original_base, new_base



original, mutated, pos, original_base, new_base = pointmutation('ATGCGTAC')
print(f'original: {original}')
print(f'mut: {mutated}')
print(f'{original_base}>{new_base} at position {pos}')

def mis_match(dna, pattern, maxmismatch):
    count = 0
    # Iterate through the DNA sequence to find potential matches for the pattern
    for i in range(len(dna) - len(pattern) + 1):
        current_substring = dna[i : i + len(pattern)]
        mismatches = sum(1 for a, b in zip(current_substring, pattern) if a != b)
        if mismatches <= maxmismatch:
            count += 1
    return count

# Example usage:
dna = 'ATTGTTTAGTGAATGTA'
pattern = 'TGG'
maxmismatch = 1
print ({mis_match(dna, pattern, maxmismatch)})

dna='''ACTCAGATCTGTCATACCCGTGTGAAAAGTAGCAAGAACAAGAAAAGCAGCATGTTGAGCATCACGGCCC
GTAACCTGGCAAGCGCCCTCCGCAGCAGCCTCGTCGGCACATCGTCGCGCGTGGCCGCCGTGCGCTGTCT
CGACGGAACCGAGGAATCGGCGGAGGAGTTCGACAAGCGCTACGAGAAGTACTTCAGCCGTGAGGGCATC'''
pattern='TAA'


def mis_match(dna, pattern, maxmismatch=1):
    count = 0
    for i in range(len(dna) - len(pattern) + 1):
        window = dna[i:i+len(pattern)]
        mismatches = sum(1 for a, b in zip(window, pattern) if a != b)
        if mismatches <= maxmismatch:
            count += 1
    return count



print('found at position', i)
print(mis_match(dna, pattern, maxmismatch=1))

startcodon='ATG'
stopcodon=['TAA','TAG', 'TGA']
for i in range(len(dna)-2):
  window=dna[i:i+3]
  if window==startcodon:
    print('this is start codon',window)
  elif window in stopcodon:

    print(window)

def patterncount(dna,pattern):
  count=0 # Initialize count before the loop
  for i in range(len(dna)-len(pattern)+1):
    window=dna[i:i+len(pattern)] # Correct slicing
    if window==pattern:
      count+=1
  return count # Return count after the loop

# Example usage:
dna='''ACTCAGATCTGTCATACCCGTGTGAAAAGTAGCAAGAACAAGAAAAGCAGCATGTTGAGCATCACGGCCC
GTAACCTGGCAAGCGCCCTCCGCAGCAGCCTCGTCGGCACATCGTCGCGCGTGGCCGCCGTGCGCTGTCT
CGACGGAACCGAGGAATCGGCGGAGGAGTTCGACAAGCGCTACGAGAAGTACTTCAGCCGTGAGGGCATC'''
pattern='TAG'
print(pattern,patterncount(dna,pattern))

